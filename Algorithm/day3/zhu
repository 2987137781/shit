#include<stdio.h>
#include<limits.h>
#define N 6		//图的顶点数 

typedef struct Graph{
	char V[N + 1];	//点集 
	int E[N][N];	//邻接矩阵 
}Graph;

void Prim(Graph* g){
	int i , j, vis[N] = {0}, dis[N] = {0};
	vis[0] = 1;					//将A点加入生成树
	printf("%c", g->V[0]);
	for(i = 1; i < N; i++)		//更新dis数组 
		dis[i] = g->E[0][i];
	
	for(i = 1; i < N; i++){
		int minV = 0, min = INT_MAX;
		//将到生成树距离最小的点加入 
		for(j = 1; j < N; j++){
			if(!vis[j] && dis[j] < min){
				min = dis[j];
				minV = j;
			}
		}
		vis[minV] = 1;
		printf("-%c", g->V[minV]);
		
		//更新生成树到未选中各点的距离 
		for(j = 1; j < N; j++){
			if(!vis[j] && dis[j] > g->E[minV][j])
				dis[j] = g->E[minV][j];			
		}
	}
}


void Kruscal(Graph* g){
	int i, j, vis[N] = {0};
	int MST[N][N] = {{0}};	//生成树的邻接矩阵 
	
	for(i = 0; i < N; i++){
		int k, q, r, l, min = INT_MAX;
		//找到未被选中的最小的且不会成环的边 
		for(k = 0; k < N; k++)
			for(q = 0; q < N; q++){
				if(vis[k] == 0 || vis[q] == 0)	//边的起点和终点不同时在生成树中 
					if(MST[k][q] == 0 && g->E[k][q] < min){
						min = g->E[k][q];
						r = k;  l = q;
					}					
			}
		MST[r][l] = g->E[r][l];
		MST[l][r] = g->E[l][r];
		vis[r] = 1;	  vis[l] = 1;
	}
	
	for(i = 0; i < N; i++){
		for(j = 0; j < N; j++)
			printf("%d ", MST[i][j]);
		printf("\n");
	}
}


int main(void){
	int max = INT_MAX;
	Graph g = {"ABCDEF",
			   {{max,5,6,4,max,max}, {5,max,1,2,max,max},
				{6,1,max,2,5,3}, {4,2,2,max,max,4},
				{max,max,5,max,max,4}, {max,max,3,4,4,max}}};
	
	printf("Prim算法最小生成树：");
	Prim(&g);
	
	printf("\nKruscal算法最小生成树的邻接矩阵：\n");
	Kruscal(&g);
	
	return 0;
}
